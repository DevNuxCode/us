---
interface Props {
  title: string;
  content: string;
  url: string;
  isOpen: boolean;
  onClose: () => void;
  lang?: 'en' | 'es';
}

const { title, content, url, lang = 'en' } = Astro.props;

const translations = {
  en: {
    close: 'Close',
    watchVideo: 'Watch Video',
  },
  es: {
    close: 'Cerrar',
    watchVideo: 'Ver Video',
  }
};

const t = translations[lang];
---

<div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <div class="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    <div class="relative transform overflow-hidden rounded-lg bg-white dark:bg-gray-800 px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
      <div class="absolute top-0 right-0 pt-4 pr-4">
        <button type="button" class="rounded-md bg-white dark:bg-gray-800 text-gray-400 hover:text-gray-500 focus:outline-none">
          <span class="sr-only">{t.close}</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="sm:flex sm:items-start">
        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
          <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-white" id="modal-title">
            {title}
          </h3>
          <div class="mt-4">
            <div class="prose dark:prose-invert max-w-none" set:html={content} />
          </div>
          <div class="mt-4">
            <a
              href={url}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex justify-center rounded-md border border-transparent bg-theme px-4 py-2 text-sm font-medium text-white shadow-sm hover:opacity-90"
            >
              {t.watchVideo}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const closeButton = document.querySelector('button');
  const modal = document.querySelector('[role="dialog"]');

  closeButton?.addEventListener('click', () => {
    modal?.remove();
  });

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      modal?.remove();
    }
  });

  // Close on background click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
</script>