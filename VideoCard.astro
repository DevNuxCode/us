---
interface Props {
  id: number;
  date: string;
  name: string;
  content: string;
  imageUrl: string;
  url: string;
  lang?: 'en' | 'es';
}

const { id, date, name, content, imageUrl, url, lang = 'en' } = Astro.props;
const formattedDate = new Date(date).toLocaleDateString(lang === 'en' ? 'en-US' : 'es-ES');

const translations = {
  en: {
    viewDetails: 'View Details',
  },
  es: {
    viewDetails: 'Ver Detalles',
  }
};

const t = translations[lang];
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden cursor-pointer hover:opacity-90 transition-opacity">
  <img src={imageUrl} alt={name} class="w-full h-48 object-cover" />
  <div class="p-6">
    <p class="text-sm text-gray-500 dark:text-gray-400">ID: {id}</p>
    <p class="text-sm text-gray-500 dark:text-gray-400">{formattedDate}</p>
    <h3 class="mt-2 text-xl font-semibold text-gray-900 dark:text-white">{name}</h3>
    <button
      class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-theme hover:opacity-90"
      data-video-id={id}
      data-video-name={name}
      data-video-content={content}
      data-video-url={url}
    >
      {t.viewDetails}
    </button>
  </div>
</div>

<script>
  function showModal(name: string, content: string, url: string, lang: string = 'en') {
    const modalHtml = `
      <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
          <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
          <div class="relative transform overflow-hidden rounded-lg bg-white dark:bg-gray-800 px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
            <div class="absolute top-0 right-0 pt-4 pr-4">
              <button type="button" class="rounded-md bg-white dark:bg-gray-800 text-gray-400 hover:text-gray-500 focus:outline-none">
                <span class="sr-only">${lang === 'en' ? 'Close' : 'Cerrar'}</span>
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div class="sm:flex sm:items-start">
              <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-white" id="modal-title">
                  ${name}
                </h3>
                <div class="mt-4">
                  <div class="prose dark:prose-invert max-w-none">${content}</div>
                </div>
                <div class="mt-4">
                  <a
                    href="${url}"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex justify-center rounded-md border border-transparent bg-theme px-4 py-2 text-sm font-medium text-white shadow-sm hover:opacity-90"
                  >
                    ${lang === 'en' ? 'Watch Video' : 'Ver Video'}
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);
    setupModalListeners();
  }

  function setupModalListeners() {
    const modal = document.querySelector('[role="dialog"]');
    const closeButton = modal?.querySelector('button');

    closeButton?.addEventListener('click', () => {
      modal?.remove();
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        modal?.remove();
      }
    });

    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  // Add click handlers to all video cards
  document.querySelectorAll('[data-video-id]').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      const name = target.dataset.videoName || '';
      const content = target.dataset.videoContent || '';
      const url = target.dataset.videoUrl || '';
      const lang = document.documentElement.lang;
      showModal(name, content, url, lang);
    });
  });
</script>